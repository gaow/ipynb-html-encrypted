#!/usr/bin/env sos-runner
#fileformat=SOS1.0

[global]
# Path to notebook or markdown file (required)
parameter: notebook = path()
# Set password. If unspecified a random password
# will be generated, reported and used.
parameter: password = ''
# Path to login page template
parameter: tpl = path()
# Login page title
parameter: title = ""
# Path to output file directory
parameter: outdir = ""
fail_if(not notebook.is_file(), msg = 'Need input parameter ``--notebook``')

# Generate plain HTML
[default_1]
depends: Py_Module('ipyrmd')
input: notebook
output: f"{_input:n}.original.html"
bash: expand = True, stderr = False, stdout = False
  {("ipyrmd --to ipynb --from Rmd -y -o .sos/%s.ipynb %s" % (_input.name, _input)) if str(_input).endswith(".md") else ""}
  sos convert {(".sos/%s.ipynb" % _input.name) if str(_input).endswith(".md") else _input} {_output} --template sos-cm-toc

# Encypt HTML
[default_2]
import string, random
def pw_gen(size = 8, chars=string.ascii_letters + string.digits):
  return ''.join(random.choice(chars) for _ in range(size))
if len(password) == 0:
  password = pw_gen()
  print(f"\t\033[1;4mPassword set to: {password}\033[0m")
if len(outdir) == 0:
  outdir = f'{_input:d}'

output: f"{outdir}/{_input:bnn}.html"
bash: expand = True, container="gaow/staticrypt", volumes = f"{outdir}:{outdir}"
  staticrypt {_input} {password} -o {_output} -t "{title if len(title) else _output.name[:-5]}" {("-f " + str(tpl)) if tpl.is_file() else ""}
